{"mappings":"mrBAOO,MAAMA,EAAa,4BACpBC,UAAwBC,EAAAC,gCAE1BC,QACAC,KAAKC,MAAQ,GAGfC,gBACE,OAAOC,MAAMC,KAAKJ,KAAKK,UAAUC,QAGnCC,QAASC,EAAIb,GACX,OAAIa,IAAQR,KAAKQ,MAKdR,KAAKS,qBACNT,KAAKS,oBAAoBC,QAG3BV,KAAKW,KAAK,CAAEC,KAAM,eAElBZ,KAAKa,kBAAoB,IAAIC,SAAO,CAAEC,EAASC,KAC7CC,QAAQC,IAAI,qBACZlB,KAAKS,oBAAsB,IAAIU,UAAUX,GACzCR,KAAKS,oBAAoBW,OAAM,KAC7BpB,KAAKW,KAAK,CAAEC,KAAM,cAClBG,EAAQf,KAAKS,oBAAoBD,KACjCS,QAAQC,IAAI,eAAeV,GACvBR,KAAKC,MAAMoB,OAAS,IACtBrB,KAAKC,MAAMqB,SAAQC,GAAKvB,KAAKS,oBAAoBe,KAAKD,KACtDvB,KAAKC,MAAQ,KAGjBD,KAAKS,oBAAoBgB,QAAO,KAC9BzB,KAAKW,KAAK,CAAEC,KAAM,qBAClBI,IACAhB,KAAKQ,IAAI,IAEXR,KAAKS,oBAAoBiB,QAAO,KAC9B1B,KAAKW,KAAK,CAAEC,KAAM,iBAClBZ,KAAKQ,IAAI,IAEXR,KAAKS,oBAAoBkB,UAAYC,GAAQ5B,KAAK6B,eAAeD,EAAKA,SAExE5B,KAAKQ,IAAMA,GAjCFR,KAAKa,kBAqChBgB,eAAgBD,GACd,MAAME,EAAOC,KAAKC,MAAMJ,GACxB5B,KAAKW,KAAKmB,GAGZG,YAAaC,GACgC,GAAvClC,KAAKS,oBAAoB0B,WAI7BnC,KAAKS,oBAAoBe,KAAKU,GAH5BlC,KAAKC,MAAMmC,KAAKF,IAOf,MAAMG,EAAS,IAAIzC,EAC1B0C,OAAOC,OAASF,sFCpEHG,gBAETxC,KAAKK,UAAY,GAInBoC,GAAI7B,EAAM8B,GACR1C,KAAKK,UAAU+B,MAAMO,IACfA,EAAM/B,OAASA,GACjB8B,EAASC,MAKfC,MAAOF,GACL1C,KAAKK,UAAU+B,KAAKM,GAGtB/B,KAAMgC,GACJ3C,KAAKK,UAAUiB,SAAQuB,IACrB,IACEA,EAAEF,GACF,MAAOG,GACP7B,QAAQ6B,MAAM,mCACd7B,QAAQC,IAAI4B,6BCtBpBR,OAAOS,iBAAiB,QAAM,KAC5BC,EAAAT,OAAOhC","sources":["inspector/client.js","inspector/genericdispatcher.js","app.js"],"sourcesContent":["/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { GenericDispatcher } from './genericdispatcher'\n\n\nexport const DEFAULT_URL =\"ws://localhost:8765\"\nclass InspectorClient extends GenericDispatcher {\n  constructor () {\n    super()\n    this.queue = []\n  }\n\n  getEventTypes () {\n    return Array.from(this.listeners.keys())\n  }\n\n  connect (url=DEFAULT_URL) {\n    if (url === this.url) {\n      return this.connectionPromise\n    }\n    // This is a new connection! \n    // Close a connection if we have one. \n    if(this.websocketConnection){\n      this.websocketConnection.close();\n    }\n\n    this.emit({ type: 'connecting' });\n\n    this.connectionPromise = new Promise((resolve, reject) => {\n      console.log('Doing Connection!')\n      this.websocketConnection = new WebSocket(url)\n      this.websocketConnection.onopen = () => {\n        this.emit({ type: 'connected' })\n        resolve(this.websocketConnection.url)\n        console.log('Connected to'+url)\n        if (this.queue.length > 0) {\n          this.queue.forEach(c => this.websocketConnection.send(c))\n          this.queue = []\n        }\n      }\n      this.websocketConnection.onerror = () => { \n        this.emit({ type: 'connectionFailed' }); \n        reject();\n        this.url=\"\";\n      }\n      this.websocketConnection.onclose = () => { \n        this.emit({ type: 'disconnected' }) \n        this.url=\"\";\n      }\n      this.websocketConnection.onmessage = data => this.processMessage(data.data)\n    })\n    this.url = url;\n    return this.connectionPromise\n  }\n\n  processMessage (data) {\n    const json = JSON.parse(data)\n    this.emit(json)\n  }\n\n  sendCommand (command) {\n    if (this.websocketConnection.readyState != 1) {\n      this.queue.push(command)\n      return\n    }\n    this.websocketConnection.send(command)\n  }\n}\n\nexport const Client = new InspectorClient()\nwindow.Client = Client\n","/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nexport class GenericDispatcher {\n  constructor () {\n    this.listeners = []\n  }\n\n  // Add an listener to $event\n  on (type, callback) {\n    this.listeners.push((event) => {\n      if (event.type === type) {\n        callback(event)\n      }\n    })\n  }\n\n  onAny (callback) {\n    this.listeners.push(callback)\n  }\n\n  emit (event) {\n    this.listeners.forEach(l => {\n      try {\n        l(event)\n      } catch (error) {\n        console.error('Exception Running Eventlistener')\n        console.log(error)\n      }\n    })\n  }\n}\n","/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { Client } from './inspector/client'\n\nwindow.addEventListener('load', () => {\n  Client.connect()\n})\n"],"names":["$917267a449c772e5$export$f8f809e817b3586c","$917267a449c772e5$var$InspectorClient","$vbrOd","GenericDispatcher","super","this","queue","getEventTypes","Array","from","listeners","keys","connect","url","websocketConnection","close","emit","type","connectionPromise","Promise","resolve","reject","console","log","WebSocket","onopen","length","forEach","c","send","onerror","onclose","onmessage","data","processMessage","json","JSON","parse","sendCommand","command","readyState","push","$917267a449c772e5$export$1f2bb630327ac4b6","window","Client","$05dbc69b418e2669$export$ec14bca3b48490a1","on","callback","event","onAny","l","error","addEventListener","$cud2N"],"version":3,"file":"index.a2bfb4a5.js.map"}